#!/bin/bash
# Sequenced, automated testing.


## End of header.

# Some config/defaults to get us going.
shestDir="shest"
userConfigLocation=~/.config/shest

defaultConfig="# Config for shest

# Test types for each stage.
testTypes=\"unit integration regression\"
# testTypes=\"unit\"

# Where should the tests be run?
testLocation=\"/tmp/shest-\$\$\"
# testLocation=\".\"
# testLocation=~/shest/shest-\$\$

# Delete temporary files after the test finishes.
deleteTmp=always
# deleteTmp=success
# deleteTmp=failure
# deleteTmp=never

# Delete logs after the test finishes.
# If testLocation is in /tmp, set this to never to avoid an annoying warning.
deleteLogs=never
# deleteLogs=success
# deleteLogs=failure
# deleteLogs=never

# Is a warning a failure?
# Generally it should be. But sometimes you want to know about stuff that isn't optimal, but not breal the build for it. If that's the case for you, this is the setting to change.
warningIsAFailure=true
# warningIsAFailure=false

# Copy origin directory if testLocation is not \".\"?
# You will almost want to do keep this set to true. It is useful to set this to false when testing the unit tester. I can't currently think of another use case. But it's here if you need it.
copyOrigin=true
# copyOrigin=false
"

newTest="#!/bin/bash
# Write a decription of the test here.

. \"\$SHEST_SCRIPT\" \"--doNothing\"

doSomething ## Test this.

expect_exitCode 0


# Here is a list of expect_.* helper functions provided via $0 --listExpects :
#"

newTestFooter="

# expect_.* is preferred, but if you need more flexibility, you can also write more custom tests like this:
#
# if [ 1 -eq 1 ]; then
#   pass "Yay!"
# else
#   fail \"1 should definitely have equalled 1.\"
# fi"

colourReset='\033[0m'
colourBlack='\033[0;30m'
colourRed='\033[0;31m'
colourGreen='\033[0;32m'
colourBrown='\033[0;33m'
colourBlue='\033[0;34m'
colourPurple='\033[0;35m'
colourCyan='\033[0;36m'
colourGrey='\033[0;37m'

colourDarkGrey='\033[1;30m'
colourBrightRed='\033[1;31m'
colourBrightGreen='\033[1;32m'
colourYellow='\033[1;33m'
colourBrightBlue='\033[1;34m'
colourBrightPueple='\033[1;35m'
colourBrightCyan='\033[1;36m'
colourWhite='\033[1;37m'

colourNormal="$colourReset$colourGrey"
colourPass="$colourGreen"
colourWarn="$colourBrown"
colourFail="$colourRed"
colourInsignificant="$colourDarkGrey"
colourTestName="$colourNormal"
colourContext="$colourCyan"
colourTestMessage="$colourNormal"
colourStage="$colourPurple"
colourTestSet="$colourYellow"
colourTestType="$colorBrightCyan"

if [ "$DEBUG" == '' ]; then
    DEBUG=0 # This can be set in an environment variable or in config.
fi

# Here are a couple of functions to get us going.
function errorExit
{
    local message="$1"
    echo "$message" >&2
    exit 1
}

function findShestHome
{
    if [ -e "$shestDir/config/general" ]; then
        echo "$(pwd)"
    elif [ "$(pwd)" == '/' ]; then
        echo '.'
        return 1
    else
        cd ..
        findShestHome
    fi
}

if [ "$SHEST_SCRIPT" == '' ]; then
    case "$(uname -s)" in
        Linux*)
            export SHEST_SCRIPT="$(readlink -f "$0")"
        ;;
        Darwin*)
            # TODO Could someone please confirm this works in macOS? Or confirm a better way? - https://github.com/ksandom/shest/issues/1
            if ! which greadlink > /dev/null; then
                errorExit "Need greadlink when on macOS. If you can see a better way, a PR would be very welcome."
            fi
            export SHEST_SCRIPT="$(greadlink -f "$0")"
        ;;
        CYGWIN*)
            # TODO Could someone please confirm this works in cygwin? - https://github.com/ksandom/shest/issues/2
            export SHEST_SCRIPT="$(readlink -f "$0")"
        ;;
        *)
            errorExit "Failed to detect a known OS."
        ;;
    esac
fi

# Load configured defaults.
if [ -e "/etc/shest/defaults" ]; then
    . "/etc/shest/defaults"
fi

if [ ! -d "$userConfigLocation" ] && [ -e "/etc/shest/" ] ; then
    mkdir -p "$userConfigLocation"
    cp /etc/shest/* "$userConfigLocation"
fi

if [ -e "$userConfigLocation/defaults" ]; then
    . "$userConfigLocation/defaults"
fi

# Figure out exactly where our home is and load our config.
originalTestLocation="$testLocation"
shestHome="$(findShestHome)"
if [ "$SHEST_CONFIG" == '' ]; then
    SHEST_CONFIG="$shestHome/$shestDir/config/general"
fi

if [ -e "$SHEST_CONFIG" ]; then
    . "$SHEST_CONFIG"
elif [ "$1" == '--createProject' ] || [ "$1" == '--help' ] || [ "${1::7}" == '--debug' ]; then # Shut up and let them do it! ;)
    true
else
    errorExit "It looks like shest has not been initialised on this project yet. You can do so by running \"$0 --createProject\"."
fi

# If we are being called as a library for a test, we don't want to reset the testLocation provided by the original caller.
if [ "$originalTestLocation" != '' ]; then
    testLocation="$originalTestLocation"
    unset originalTestLocation
fi

# Load configured overrides.
if [ -e "/etc/shest/overrides" ]; then
    . "/etc/shest/overrides"
fi

if [ -e "$userConfigLocation/overrides" ]; then
    . "$userConfigLocation/overrides"
fi



# Now we can get to the main meat of the program.
function debugOut
{
    local level="$1"
    local message="$2"
    
    if [ "$level" -le "$DEBUG" ]; then
        echo "Debug $level: $message"
    fi
}

function notImplemented
{
    local thing="$1"
    
    errorExit "$thing is not implemented yet."
}

function createProject
{
    mkdir -p "$shestHome/$shestDir/config"
    createConfig
    createTestTypes
}

function createConfig
{
    echo "$defaultConfig" > "$shestHome/$shestDir/config/general"
}

function createTestTypes
{
    cd "$shestHome/$shestDir"
    
    for testType in $testTypes; do
        if [ ! -e "$finalDir" ]; then
            mkdir -p "$testType/myFirstStage"
            cd "$testType/myFirstStage"
            createTest "exampleTest"
            cd ~-
        fi
    done
}

function createTest
{
    local fileName="$1"
    
    echo "$newTest" > "$fileName"
    $0 --listExpects | sed 's/^/# /g' >> "$fileName"
    echo "$newTestFooter" >> "$fileName"
    
    chmod 755 "$fileName"
}

function prepTests
{
    echo "Going to run tests in \"$testLocation\"."
    mkdir -p "$testLocation"
    cd "$testLocation"
    
    mkdir -p "$shestDir/"{tmp,log}
    
    if [ "$copyOrigin" == 'true' ]; then
        # For most use-cases, this will be true. But if shest is configured to use the project directory as its testLocation, all of this stuff will already exist.
        rsync -rl "$shestHome"/* .
    fi
}

function runTests
{
    testTypesOverride="$1"
    export ORIGIN="$(findShestHome)"
    
    # Prep.
    prepTests
    failures=0
    warnings=0
    failuresAndWarnings=0
    if [ "$RESULTS_FILE" == '' ]; then
        export RESULTS_FILE="$testLocation/$shestDir/tmp/results.csv"
    fi
    
    if [ "$testTypesOverride" == '' ]; then
        testTypesToTest="$testTypes"
    else
        testTypesToTest="$testTypesOverride"
    fi
    
    # Do.
    export testLocation
    for testType in $testTypesToTest; do
        indentation=''
        if [ -e "$shestHome/$shestDir/$testType" ]; then
            echo -e "${indentation}${colourTestType}Test type${colourInsignificant}: ${colourNormal}$testType"
            for stage in $(ls -1 "$shestHome/$shestDir/$testType" | sort -u); do
                indentation='  '
                stageDir="$shestHome/$shestDir/$testType/$stage"
                echo -e "${indentation}${colourStage}Stage${colourInsignificant}: ${colourNormal}$stage"
                for testItem in $(ls -1 "$stageDir" | sort -u); do
                    testItemEntity="$stageDir/$testItem"
                    if [ -f "$testItemEntity" ]; then
                        export TEST_NAME="$stage_$testItem"
                        export TEST_FILE="$testItemEntity"
                        export indentation='    '
                        
                        runTest
                    elif [ -d "$testItemEntity" ]; then
                        export indentation='    '
                        echo -e "${indentation}${colourTestSet}Test set${colourInsignificant}: ${colourNormal}$testItem"
                        for subTestItem in $(ls -1 "$testItemEntity" | sort -u); do
                            export TEST_NAME="$stage_$testItem_$subTestItem"
                            export TEST_FILE="$testItemEntity/$subTestItem"
                            export indentation='      '
                            
                            runTest &
                        done
                        wait
                    fi
                done
            done
        else
            echo -e "${indentation}${colourTestType}Test type${colourInsignificant}: ${colourNormal}Skipping $testType (empty)."
        fi
    done
    
    showAnalytics
    
    # Clean up.
    if [ "$warningIsAFailure" == 'true' ]; then
        valueToTest="$failuresAndWarnings"
    else
        valueToTest="$failures"
    fi
    
    if [ "$valueToTest" -eq 0 ]; then
        cleanUp 'true'
        return 0
    else
        cleanUp 'false'
        return 1
    fi
}

function runTest
{
    startDir="$(pwd)"
    cd "$testLocation"

    export TEST_RESULT_FILE="$testLocation/$shestDir/tmp/$TEST_NAME.result"
    export TEST_SCRIPT_FILE="$testLocation/$shestDir/tmp/$TEST_NAME.script"
    export TEST_ERROR_FILE="$testLocation/$shestDir/tmp/$TEST_NAME.error"
    export TEST_DESCRIPTION="$(head -n2 "$TEST_FILE" | tail -n1)"
    export TEST_COMMAND_OUTPUT="$testLocation/$shestDir/log/$TEST_NAME.commandOutput"
    export SHEST_CONFIG
    export HOME="$(pwd)"
    
    sed 's#^\(.*\)\#\# Test this.'"#result=\"\$(\1 2>$TEST_ERROR_FILE)\"\nexitCode="\$?"#g" "$TEST_FILE" > "$TEST_SCRIPT_FILE"
    
    chmod 755 "$TEST_SCRIPT_FILE"
    "$TEST_SCRIPT_FILE" 2> "$testLocation/$shestDir/log/$TEST_NAME.log" 1>&2
    cat "$TEST_RESULT_FILE"
    
    cd "$startDir"
}

function showAnalytics
{
    if [ -e "$RESULTS_FILE" ]; then
        passed="$(grep "^pass," "$RESULTS_FILE" | wc -l)"
        warnings="$(grep "^warn," "$RESULTS_FILE" | wc -l)"
        failures="$(grep "^fail," "$RESULTS_FILE" | wc -l)"
        
        let failuresAndWarnings=$failures+$warnings
        
        echo
        echo -e "${colourPass}Pass${colourInsignificant}: ${colourNormal}$passed${colourInsignificant}, ${colourWarn}Warn${colourInsignificant}: ${colourNormal}$warnings${colourInsignificant}, ${colourFail}Fail${colourInsignificant}: ${colourNormal}$failures"
    else
        errorExit "No results to show."
    fi
    
}

function cleanUp
{
    local completeSuccess="$1"
    
    case "$deleteTmp" in
        'always')
            cleanTmp
        ;;
        'success')
            if [ "$completeSuccess" == 'true' ]; then
                cleanTmp
            fi
        ;;
        'failure')
            if [ "$completeSuccess" == 'false' ]; then
                cleanTmp
            fi
        ;;
    esac
    
    case "$deleteLogs" in
        'always')
            cleanLogs
        ;;
        'success')
            if [ "$completeSuccess" == 'true' ]; then
                cleanLogs
            fi
        ;;
        'failure')
            if [ "$completeSuccess" == 'false' ]; then
                cleanLogs
            fi
        ;;
    esac
}

function cleanTmp
{
    if [ "${testLocation::5}" == '/tmp/' ]; then
        debugOut 1 "deleteTmp==\"$deleteTmp\" and testLocation ($testLocation) is in /tmp. So deleting everything, including logs, which are also in the same directory."
        cd "$shestHome"
        rm -Rf "$testLocation"
    else
        debugOut 0 "deleteTmp==\"$deleteTmp\", but testLocation ($testLocation) is not in /tmp. So only deleting tmp in this line."
        cd "$testLocation"
        rm -Rf "$shestDir/tmp"
    fi
}

function cleanLogs
{
    if [ "${testLocation::5}" == '/tmp/' ]; then
        debugOut 0 "Deleting logs, but testLocation is in /tmp, so if tmp is configured to be deleted, logs will get deleted anyway."
    fi
    cd "$testLocation"
    rm -Rf "$shestDir/log"
}

function testingShest
{
    # This function is strictly for testing shest within shest. Everyone else should leave it a lone.
    
    unset SHEST_CONFIG
}

function beginNestedShest
{
    # We need to run shest within shest without polluting the outside shest results with the internal shest results.
    originalResultsFile="$RESULTS_FILE"
    export RESULTS_FILE="${originalResultsFile}.inside"

    # We need to get rid of the failed results, that will be written to the same place as the previous test, so that they don't interfere with the current run.
    rm -f "$RESULTS_FILE"
}

function endNestedShest
{
    # This needs to be set back so that we write the results to the right place for the parent process.
    export RESULTS_FILE="${originalResultsFile}"
}

# Stuff for sending test results to the right place.
function pass
{
    local message="$1"
    
    setResult "pass" "$message"
}

function warn
{
    local message="$1"
    
    setResult "warn" "$message"
}

function fail
{
    local message="$1"
    
    setResult "fail" "$message"
}

function listExpects
{
    grep '^function expect_' "$0" | sed 's/^function //g;s/ # / /g'
}

function expect_exitCode # expectedCode [message] [resultOverride]
{
  local code="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  expect_value "$exitCode" "$code" "$message" "$resultOverride" "expect_exitCode"
}

function expect_not_exitCode # unexpectedCode [message] [resultOverride]
{
  local code="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  expect_not_value "$exitCode" "$code" " $message" "$resultOverride" "expect_not_exitCode"
}

function expect_value # actualValue expectedValue [message] [resultOverride] [contextOverride]
{
  local actualValue="$1"
  local expectedValue="$2"
  local message="${3:-}"
  local resultOverride="${4:-fail}"
  local contextOverride="${5:-expect_value}"
  
  if [ "$actualValue" == "$expectedValue" ]; then
    setResult "pass" "$message" "$contextOverride"
  else
    setResult "$resultOverride" "expect_value: \"$actualValue\" should equal \"$expectedValue\". $message" "$contextOverride"
  fi
}

function expect_not_value # actualValue unexpectedValue [message] [resultOverride] [contextOverride]
{
  local actualValue="$1"
  local expectedValue="$2"
  local message="${3:-}"
  local resultOverride="${4:-fail}"
  local contextOverride="${5:-expect_value}"
  
  if [ ! "$actualValue" == "$expectedValue" ]; then
    setResult "pass" "$message" "$contextOverride"
  else
    setResult "$resultOverride" "expect_value: \"$actualValue\" should equal \"$expectedValue\". $message" "$contextOverride"
  fi
}

function expect_exists # fileOrDirectoryPath [message] [resultOverride]
{
  local fileName="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  if [ -e "$fileName" ]; then
    setResult "pass" "$message" "expect_exists"
  else
    setResult "$resultOverride" "expect_exists: file/folder \"$fileName\" should exist. $message" "expect_exists"
  fi
}

function expect_not_exists # fileOrDirectoryPath [message] [resultOverride]
{
  local fileName="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  if [ ! -e "$fileName" ]; then
    setResult "pass" "$message" "expect_not_exists"
  else
    setResult "$resultOverride" "expect_not_exists: file/folder \"$fileName\" should not exist. $message" "expect_not_exists"
  fi
}

function expect_fileContains # fileOrDirectoryPath regexOrString [message] [resultOverride]
{
  local fileName="$1"
  local regex="$2"
  local message="${3:-}"
  local resultOverride="${4:-fail}"
  
  if grep -e "$regex" "$fileName"; then
    setResult "pass" "$message" "expect_fileContains"
  else
    setResult "$resultOverride" "expect_fileContains: file \"$fileName\" should contain/match \"$regex\". $message" "expect_fileContains"
  fi
}

function expect_not_fileContains # fileOrDirectoryPath regexOrString [message] [resultOverride]
{
  local fileName="$1"
  local regex="$2"
  local message="${3:-}"
  local resultOverride="${4:-fail}"
  
  if ! grep -e "$regex" "$fileName"; then
    setResult "pass" "$message" "expect_not_fileContains"
  else
    setResult "$resultOverride" "expect_not_fileContains: file \"$fileName\" should contain/match \"$regex\". $message" "expect_not_fileContains"
  fi
}

function expect_resultContains # regexOrString [message] [resultOverride]
{
  local regex="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  if echo "$result" | grep -e "$regex"; then
    setResult "pass" "$message" "expect_resultContains"
  else
    setResult "$resultOverride" "expect_resultContains: \$result should contain/match \"$regex\". $message" "expect_resultContains"
  fi
}

function expect_not_resultContains # regexOrString [message] [resultOverride]
{
  local regex="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  if ! echo "$result" | grep -e "$regex"; then
    setResult "pass" "$message" "expect_not_resultContains"
  else
    setResult "$resultOverride" "expect_not_resultContains: \$result should not contain/match \"$regex\". $message" "expect_not_resultContains"
  fi
}

function expect_errorContains # regexOrString [message] [resultOverride] - Requires the "## Test this." syntax.
{
  local fileName="$TEST_ERROR_FILE"
  local regex="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  if grep -e "$regex" "$fileName"; then
    setResult "pass" "$message" "expect_errorContains"
  else
    setResult "$resultOverride" "expect_errorContains file \"$fileName\" should contain/match \"$regex\". $message" "expect_errorContains"
  fi
}

function expect_not_errorContains # regexOrString [message] [resultOverride] - Requires the "## Test this." syntax.
{
  local fileName="$TEST_ERROR_FILE"
  local regex="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  
  if ! grep -e "$regex" "$fileName"; then
    setResult "pass" "$message" "expect_not_errorContains"
  else
    setResult "$resultOverride" "expect_not_errorContains file \"$fileName\" should contain/match \"$regex\". $message" "expect_not_errorContains"
  fi
}

function expect_resultLines # numberOfLines [message] [resultOverride]
{
  local numberOfLines="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  local actualNumberOflines="$(echo "$result" | wc -l)"
  
  if [ "$actualNumberOflines" -eq "$numberOfLines" ] ; then
    setResult "pass" "$message" "expect_resultLines"
  else
    setResult "$resultOverride" "expect_resultLines \$result should have exactly $numberOfLines lines, but actually has $actualNumberOflines lines. $message" "expect_resultLines"
  fi
}

function expect_not_resultLines # numberOfLines [message] [resultOverride]
{
  local numberOfLines="$1"
  local message="${2:-}"
  local resultOverride="${3:-fail}"
  local actualNumberOflines="$(echo "$result" | wc -l)"
  
  if [ ! "$actualNumberOflines" -eq "$numberOfLines" ] ; then
    setResult "pass" "$message" "expect_not_resultLines"
  else
    setResult "$resultOverride" "expect_not_resultLines \$result should not have $numberOfLines lines, but actually has $actualNumberOflines lines. $message" "expect_not_resultLines"
  fi
}

function expect_condition # conditionPart1 conditionPart2 conditionPart3 [message] [resultOverride] . Eg "$actualValue" -gt 2.    resolves to [ "$actualValue" "-gt" "2" ]
{
  local conditionPart1="$1"
  local conditionPart2="$2"
  local conditionPart3="$3"
  local message="${4:-}"
  local resultOverride="${5:-fail}"
  local actualNumberOflines="$(echo "$result" | wc -l)"
  
  # TODO This is effectively breaking shellcheck below this point. It would be great to either find another way of achieving this test (eval? nested bash?) without breaking shellcheck. Failing that, it would be great to minimise the impact of the breakage.
  # shellcheck disable=SC1009,SC1073,SC1072
  if [ "$conditionPart1" "$conditionPart2" "$conditionPart3" ] ; then
    setResult "pass" "$message" "expect_condition"
  else
    setResult "$resultOverride" "expect_condition The following condition should return success (0): [ \"$conditionPart1\" \"$conditionPart2\" \"$conditionPart3\" ]. $message" "expect_condition"
  fi
}

function expect_not_condition # conditionPart1 conditionPart2 conditionPart3 [message] [resultOverride] . Eg "$actualValue" -gt 2    resolves to [ ! "$actualValue" "-gt" "2" ]
{
  local conditionPart1="$1"
  local conditionPart2="$2"
  local conditionPart3="$3"
  local message="${4:-}"
  local resultOverride="${5:-fail}"
  local actualNumberOflines="$(echo "$result" | wc -l)"
  
  if [ ! "$conditionPart1" "$conditionPart2" "$conditionPart3" ] ; then
    setResult "pass" "$message" "expect_not_condition"
  else
    setResult "$resultOverride" "expect_not_condition The following condition should return success (0): [ ! \"$conditionPart1\" \"$conditionPart2\" \"$conditionPart3\" ]. $message" "expect_not_condition"
  fi
}

function setResult
{
    local testResult="$1"
    local message="$(echo "$2" | head -n 1)"
    local context="$3"
    
    if [ "$context" != '' ]; then
      local contextOutput="$colourInsignificant / $colourContext$context$colourInsignificant"
    else
      local contextOutput=''
    fi
    
    case $testResult in
        'pass')
            colourResult="$colourPass"
        ;;
        'warn')
            colourResult="$colourWarn"
        ;;
        'fail')
            colourResult="$colourFail"
        ;;
    esac
    
    if [ "$message" == '' ]; then
      local messageSeparator=''
    else
      local messageSeparator=':'
    fi
    
    echo -e "$indentation$colourInsignificant[$colourResult$testResult$colourInsignificant] $colourTestName$TEST_NAME$colourInsignificant$contextOutput$messageSeparator $colourTestMessage$message" >> "$TEST_RESULT_FILE"
    echo "$testResult,$TEST_NAME,$context,$TEST_DESCRIPTION,$message" >> "$RESULTS_FILE"
    
    echo -e "$result" >> "$TEST_COMMAND_OUTPUT"
}


# Stuff for command line parsing.
function requireParameter
{
    local parameterName="$1"
    local parameter="$2"
    
    if [ "$2" == '' ]; then
        errorExit "Parameter \"$parameterName\" is required. Consult $0 --help for more info."
    fi
}

function showHelp
{
        grep -B1000 '^## End of header.' "$0" | grep '^# ' | cut -b3-
        grep "') #" "$0" | grep -v grep | sed "s/^ *'/  /g; s/') #/^/g" | column -s^ -t
}


case $1 in
    '--createProject') # Create a bare project in the current directory.
        createProject
        echo "Excellent. Now take a look at the config in \"$shestHome/config/general\", and then browse around in the unit, regression, and integration directories. Some example tests have been created for you. When you'd like to create your own, you can do so by first creating a stage with \"mkdir -p shest/unit/stageName ; cd shest/unit/stageName\", then run \"$0 --createTest aNewTest\". You can read more at https://github.com/ksandom/shest ."
    ;;
    '--createConfig') # Re-create the config used be shest. This is normally done for you. But will be useful if you upgrade shest and need the latest config. It will override what ever you have in place.
        createConfig
    ;;
    '--createTest') # Create a test from a template in the current directory. --createTest testName.sh
        requireParameter "testName" "$2"
        createTest "$2"
    ;;
    '--run') # Run the tests. --run [testType] . Eg eg --run "unit" , or --run "unit integration" .
        runTests "$2"
        exit $?
    ;;
    '--listExpects') # List out the expect commands that can be used in tests.
        listExpects
    ;;
    '--help') # Show this help.
        showHelp
    ;;
    '-h'|'/?'|'help')
        showHelp
    ;;
    '--debugState')
        set | grep -i shest
    ;;
    '--doNothing')
        true
    ;;
    '')
        runTests
        exit $?
    ;;
    *)
        showHelp
        echo
        errorExit "Unknown parameter \"$1\"."
    ;;
esac
